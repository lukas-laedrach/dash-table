{
  "src/dash-table/dash/DataTable.js": {
    "description": "",
    "displayName": "DataTable",
    "methods": [],
    "props": {
      "active_cell": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "The [row, column] index of which cell is currently\r\nactive.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "columns": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "clearable": {
                "name": "bool",
                "description": "If the column is rendered as dropdowns, then the\r\n`clearable` property determines whether or not\r\nthe dropdown value can be cleared or not.\r\n\nNOTE - The name of this property may change in the future,\r\nsubscribe to [https://github.com/plotly/dash-table/issues/168](https://github.com/plotly/dash-table/issues/168)\r\nfor more information.",
                "required": false
              },
              "deletable": {
                "name": "union",
                "value": [
                  {
                    "name": "bool"
                  },
                  {
                    "name": "number"
                  }
                ],
                "description": "If True, the user can delete the column by clicking on a little `x`\r\nbutton on the column.\r\nIf there are merged, multi-header columns then you can choose\r\nwhich column header row to display the \"x\" in by\r\nsupplying a column row index.\r\nFor example, `0` will display the \"x\" on the first row,\r\n`1` on the second row.\r\nIf the \"x\" appears on a merged column, then clicking on that button\r\nwill delete *all* of the merged columns associated with it.",
                "required": false
              },
              "editable": {
                "name": "bool",
                "description": "There are two `editable` flags in the table.\r\nThis is the  column-level editable flag and there is\r\nalso the table-level `editable` flag.\r\n\nThese flags determine whether the contents of the table\r\nare editable or not.\r\n\nIf the column-level `editable` flag is set it overrides\r\nthe table-level `editable` flag for that column.",
                "required": false
              },
              "editable_name": {
                "name": "union",
                "value": [
                  {
                    "name": "bool"
                  },
                  {
                    "name": "number"
                  }
                ],
                "description": "If True, then the name of this column is editable.\r\nIf there are multiple column headers (if `name` is a list of strings),\r\nthen `editable_name` can refer to _which_ column header should be\r\neditable by setting it to the column header index.\r\nAlso, updating the name in a merged column header cell will\r\nupdate the name of each column.",
                "required": false
              },
              "format": {
                "name": "shape",
                "value": {
                  "locale": {
                    "name": "shape",
                    "value": {
                      "symbol": {
                        "name": "arrayOf",
                        "value": {
                          "name": "string"
                        },
                        "required": false
                      },
                      "decimal": {
                        "name": "string",
                        "required": false
                      },
                      "group": {
                        "name": "string",
                        "required": false
                      },
                      "grouping": {
                        "name": "arrayOf",
                        "value": {
                          "name": "number"
                        },
                        "required": false
                      },
                      "numerals": {
                        "name": "arrayOf",
                        "value": {
                          "name": "string"
                        },
                        "required": false
                      },
                      "percent": {
                        "name": "string",
                        "required": false
                      },
                      "separate_4digits": {
                        "name": "bool",
                        "required": false
                      }
                    },
                    "required": false
                  },
                  "nully": {
                    "name": "any",
                    "required": false
                  },
                  "prefix": {
                    "name": "number",
                    "required": false
                  },
                  "specifier": {
                    "name": "string",
                    "required": false
                  }
                },
                "description": "The formatting applied to the column's data.\r\n\nThis prop is derived from the [d3-format](https://github.com/d3/d3-format) library specification. Apart from\r\nbeing structured slightly differently (under a single prop), the usage\r\nis the same.\r\n\n'locale': represents localization specific formatting information\r\n  When left unspecified, will use the default value provided by d3-format.\r\n\n  'symbol': (default: ['$', '']) a list of two strings representing the\r\n  prefix and suffix symbols. Typically used for currency, and implemented using d3's\r\n  currency format, but you can use this for other symbols such as measurement units.\r\n  'decimal': (default: '.') the string used for the decimal separator\r\n  'group': (default: ',') the string used for the groups separator\r\n  'grouping': (default: [3]) a list of integers representing the grouping pattern\r\n  'numerals': a list of ten strings used as replacements for numbers 0-9\r\n  'percent': (default: '%') the string used for the percentage symbol\r\n  'separate_4digits': (default: True) separate integers with 4-digits or less\r\n\n'nully': a value that will be used in place of the nully value during formatting\r\n  If the value type matches the column type, it will be formatted normally\r\n'prefix': a number representing the SI unit to use during formatting\r\n  See `dash_table.Format.Prefix` enumeration for the list of valid values\r\n'specifier': (default: '') represents the rules to apply when formatting the number\r\n\ndash_table.FormatTemplate contains helper functions to rapidly use certain\r\ntypical number formats.",
                "required": false
              },
              "hidden": {
                "name": "bool",
                "description": "If True, then the column and its data is hidden.\r\nThis can be useful if you want to transport extra\r\nmeta data (like a data index) to and from callbacks\r\nbut you don't necessarily want to display that data.",
                "required": false
              },
              "id": {
                "name": "string",
                "description": "The `id` of the column.\r\nThe column `id` is used to match cells in data\r\nwith particular columns.\r\nThe `id` is not visible in the table.",
                "required": true
              },
              "name": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "arrayOf",
                    "value": {
                      "name": "string"
                    }
                  }
                ],
                "description": "The `name` of the column,\r\nas it appears in the column header.\r\nIf `name` is a list of strings, then the columns\r\nwill render with multiple headers rows.",
                "required": true
              },
              "presentation": {
                "name": "enum",
                "value": [
                  {
                    "value": "'input'",
                    "computed": false
                  },
                  {
                    "value": "'dropdown'",
                    "computed": false
                  }
                ],
                "description": "The `presentation` to use to display the value.\r\nDefaults to 'input' for ['numeric', 'text', 'any'].",
                "required": false
              },
              "on_change": {
                "name": "shape",
                "value": {
                  "action": {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'coerce'",
                        "computed": false
                      },
                      {
                        "value": "'none'",
                        "computed": false
                      },
                      {
                        "value": "'validate'",
                        "computed": false
                      }
                    ],
                    "required": false
                  },
                  "failure": {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'accept'",
                        "computed": false
                      },
                      {
                        "value": "'default'",
                        "computed": false
                      },
                      {
                        "value": "'reject'",
                        "computed": false
                      }
                    ],
                    "required": false
                  }
                },
                "description": "The `on_change` behavior of the column for user-initiated modifications.\r\n'action' (default 'coerce'):\r\n none: do not validate data\r\n coerce: check if the data corresponds to the destination type and\r\n attempts to coerce it into the destination type if not\r\n validate: check if the data corresponds to the destination type (no coercion)\r\n\n'failure' (default 'reject'): what to do with the value if the action fails\r\n accept: use the invalid value\r\n default: replace the provided value with `validation.default`\r\n reject: do not modify the existing value",
                "required": false
              },
              "validation": {
                "name": "shape",
                "value": {
                  "allow_null": {
                    "name": "bool",
                    "required": false
                  },
                  "default": {
                    "name": "any",
                    "required": false
                  },
                  "allow_YY": {
                    "name": "bool",
                    "required": false
                  }
                },
                "description": "The `validation` options.\r\n'allow_null': Allow the use of nully values (undefined, null, NaN) (default: false)\r\n'default': The default value to apply with on_change.failure = 'default' (default: null)\r\n'allow_YY': `datetime` columns only, allow 2-digit years (default: false).\r\n  If true, we interpret years as ranging from now-70 to now+29 - in 2019\r\n  this is 1949 to 2048 but in 2020 it will be different. If used with\r\n  `action: 'coerce'`, will convert user input to a 4-digit year.",
                "required": false
              },
              "options": {
                "name": "arrayOf",
                "value": {
                  "name": "shape",
                  "value": {
                    "label": {
                      "name": "union",
                      "value": [
                        {
                          "name": "number"
                        },
                        {
                          "name": "string"
                        }
                      ],
                      "required": true
                    },
                    "value": {
                      "name": "union",
                      "value": [
                        {
                          "name": "number"
                        },
                        {
                          "name": "string"
                        }
                      ],
                      "required": true
                    }
                  }
                },
                "description": "DEPRECATED\r\nPlease use `column_static_dropdown` instead.\r\nNOTE - Dropdown behavior will likely change in the future,\r\nsubscribe to [https://github.com/plotly/dash-table/issues/168](https://github.com/plotly/dash-table/issues/168)\r\nfor more information.",
                "required": false
              },
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'any'",
                    "computed": false
                  },
                  {
                    "value": "'numeric'",
                    "computed": false
                  },
                  {
                    "value": "'text'",
                    "computed": false
                  },
                  {
                    "value": "'datetime'",
                    "computed": false
                  }
                ],
                "description": "The data-type of the column's data.\r\n'numeric': represents both floats and ints\r\n'text': represents a string\r\n'datetime': a string representing a date or date-time, in the form:\r\n  'YYYY-MM-DD HH:MM:SS.ssssss' or some truncation thereof. Years must\r\n  have 4 digits, unless you use `validation.allow_YY: true`. Also\r\n  accepts 'T' or 't' between date and time, and allows timezone info\r\n  at the end. To convert these strings to Python `datetime` objects,\r\n  use `dateutil.parser.isoparse`. In R use `parse_iso_8601` from the\r\n  `parsedate` library.\r\n  WARNING: these parsers do not work with 2-digit years, if you use\r\n  `validation.allow_YY: true` and do not coerce to 4-digit years.\r\n  And parsers that do work with 2-digit years may make a different\r\n  guess about the century than we make on the front end.\r\n'any': represents any type of data\r\n\nDefaults to 'any' if undefined.\r\n\nNOTE: This feature has not been fully implemented.\r\nIn the future, it's data types will impact things like\r\ntext formatting options in the cell (e.g. display 2 decimals\r\nfor a number), filtering options and behavior, and editing\r\nbehavior.\r\nStay tuned by following [https://github.com/plotly/dash-table/issues/166](https://github.com/plotly/dash-table/issues/166)",
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "Columns describes various aspects about each individual column.\r\n`name` and `id` are the only required parameters.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "locale_format": {
        "type": {
          "name": "shape",
          "value": {
            "symbol": {
              "name": "arrayOf",
              "value": {
                "name": "string"
              },
              "required": false
            },
            "decimal": {
              "name": "string",
              "required": false
            },
            "group": {
              "name": "string",
              "required": false
            },
            "grouping": {
              "name": "arrayOf",
              "value": {
                "name": "number"
              },
              "required": false
            },
            "numerals": {
              "name": "arrayOf",
              "value": {
                "name": "string"
              },
              "required": false
            },
            "percent": {
              "name": "string",
              "required": false
            },
            "separate_4digits": {
              "name": "bool",
              "required": false
            }
          }
        },
        "required": false,
        "description": "The localization specific formatting information applied to all columns in the table.\r\n\nThis prop is derived from the [d3.formatLocale](https://github.com/d3/d3-format#formatLocale) data structure specification.\r\n\nWhen left unspecified, each individual nested prop will default to a pre-determined value.\r\n\n  'symbol': (default: ['$', '']) a list of two strings representing the\r\n  prefix and suffix symbols. Typically used for currency, and implemented using d3's\r\n  currency format, but you can use this for other symbols such as measurement units.\r\n  'decimal': (default: '.') the string used for the decimal separator\r\n  'group': (default: ',') the string used for the groups separator\r\n  'grouping': (default: [3]) a list of integers representing the grouping pattern\r\n  'numerals': a list of ten strings used as replacements for numbers 0-9\r\n  'percent': (default: '%') the string used for the percentage symbol\r\n  'separate_4digits': (default: True) separate integers with 4-digits or less"
      },
      "content_style": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'fit'",
              "computed": false
            },
            {
              "value": "'grow'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "`content_style` toggles between a set of CSS styles for\r\ntwo common behaviors:\r\n- `fit`: The table container's width be equal to the width of its content.\r\n- `grow`: The table container's width will grow to be the size of the container.\r\n\nNOTE - This property will likely change in the future,\r\nsubscribe to [https://github.com/plotly/dash-table/issues/176](https://github.com/plotly/dash-table/issues/176)\r\nfor more details.",
        "defaultValue": {
          "value": "'grow'",
          "computed": false
        }
      },
      "css": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "selector": {
                "name": "string",
                "required": true
              },
              "rule": {
                "name": "string",
                "required": true
              }
            }
          }
        },
        "required": false,
        "description": "The `css` property is a way to embed CSS selectors and rules\r\nonto the page.\r\nWe recommend starting with the `style_*` properties\r\nbefore using this `css` property.\r\n\nExample:\r\n[\r\n    {\"selector\": \".dash-spreadsheet\", \"rule\": 'font-family: \"monospace\"'}\r\n]",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "The contents of the table.\r\nThe keys of each item in data should match the column IDs.\r\nExample:\r\n\n[\r\n     {'column-1': 4.5, 'column-2': 'montreal', 'column-3': 'canada'},\r\n     {'column-1': 8, 'column-2': 'boston', 'column-3': 'america'}\r\n]",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "data_previous": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "The previous state of `data`. `data_previous`\r\nhas the same structure as `data` and it will be updated\r\nwhenever `data` changes, either through a callback or\r\nby editing the table.\r\nThis is a read-only property: setting this property will not\r\nhave any impact on the table."
      },
      "data_timestamp": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The unix timestamp when the data was last edited.\r\nUse this property with other timestamp properties\r\n(such as `n_clicks_timestamp` in `dash_html_components`)\r\nto determine which property has changed within a callback."
      },
      "editable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If True, then the data in all of the cells is editable.\r\nWhen `editable` is True, particular columns can be made\r\nuneditable by setting `editable` to `False` inside the `columns`\r\nproperty.\r\n\nIf False, then the data in all of the cells is uneditable.\r\nWhen `editable` is False, particular columns can be made\r\neditable by setting `editable` to `True` inside the `columns`\r\nproperty.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "end_cell": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "When selecting multiple cells\r\n(via clicking on a cell and then shift-clicking on another cell),\r\n`end_cell` represents the [row, column] coordinates of the cell\r\nin one of the corners of the region.\r\n`start_cell` represents the coordinates of the other corner."
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID of the table."
      },
      "is_focused": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If True, then the `active_cell` is in a focused state."
      },
      "merge_duplicate_headers": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If True, then column headers that have neighbors with duplicate names\r\nwill be merged into a single cell.\r\nThis will be applied for single column headers and multi-column\r\nheaders."
      },
      "n_fixed_columns": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "`n_fixed_columns` will \"fix\" the set of columns so that\r\nthey remain visible when scrolling horizontally across\r\nthe unfixed columns. `n_fixed_columns` fixes columns\r\nfrom left-to-right, so `n_fixed_columns=3` will fix\r\nthe first 3 columns.\r\n\nNote that fixing columns introduces some changes to the\r\nunderlying markup of the table and may impact the\r\nway that your columns are rendered or sized.\r\nView the documentation examples to learn more."
      },
      "n_fixed_rows": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "`n_fixed_rows` will \"fix\" the set of rows so that\r\nthey remain visible when scrolling vertically down\r\nthe table. `n_fixed_rows` fixes rows\r\nfrom top-to-bottom, starting from the headers,\r\nso `n_fixed_rows=1` will fix the header row,\r\n`n_fixed_rows=2` will fix the header row and the first row,\r\nor the first two header rows (if there are multiple headers).\r\n\nNote that fixing rows introduces some changes to the\r\nunderlying markup of the table and may impact the\r\nway that your columns are rendered or sized.\r\nView the documentation examples to learn more."
      },
      "row_deletable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If True, then a `x` will appear next to each `row`\r\nand the user can delete the row."
      },
      "row_selectable": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'single'",
              "computed": false
            },
            {
              "value": "'multi'",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "If `single`, then the user can select a single row\r\nvia a radio button that will appear next to each row.\r\nIf `multi`, then the user can select multiple rows\r\nvia a checkbox that will appear next to each row.\r\nIf `False`, then the user will not be able to select rows\r\nand no additional UI elements will appear.\r\n\nWhen a row is selected, its index will be contained\r\nin `selected_rows`.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "selected_cells": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "arrayOf",
            "value": {
              "name": "number"
            }
          }
        },
        "required": false,
        "description": "`selected_cells` represents the set of cells that are selected.\r\nThis is similar to `active_cell` except that it contains multiple\r\ncells. Multiple cells can be selected by holding down shift and\r\nclicking on a different cell or holding down shift and navigating\r\nwith the arrow keys.\r\n\nNOTE - This property may change in the future, subscribe to\r\n[https://github.com/plotly/dash-table/issues/177](https://github.com/plotly/dash-table/issues/177)\r\nfor more details.",
        "defaultValue": {
          "value": "[[]]",
          "computed": false
        }
      },
      "selected_rows": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "`selected_rows` contains the indices of the rows that\r\nare selected via the UI elements that appear when\r\n`row_selectable` is `'single'` or `'multi'`.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      },
      "start_cell": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "When selecting multiple cells\r\n(via clicking on a cell and then shift-clicking on another cell),\r\n`start_cell` represents the [row, column] coordinates of the cell\r\nin one of the corners of the region.\r\n`end_cell` represents the coordinates of the other corner."
      },
      "style_as_list_view": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If True, then the table will be styled like a list view\r\nand not have borders between the columns.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "pagination_mode": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'fe'",
              "computed": false
            },
            {
              "value": "'be'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "\"pagination\" refers to a mode of the table where\r\nnot all of the rows are displayed at once: only a subset\r\nare displayed (a \"page\") and the next subset of rows\r\ncan viewed by clicking \"Next\" or \"Previous\" buttons\r\nat the bottom of the page.\r\n\nPagination is used to improve performance: instead of\r\nrendering all of the rows at once (which can be expensive),\r\nwe only display a subset of them.\r\n\nWith pagination, we can either page through data that exists\r\nin the table (e.g. page through `10,000` rows in `data` `100` rows at a time)\r\nor we can update the data on-the-fly with callbacks\r\nwhen the user clicks on the \"Previous\" or \"Next\" buttons.\r\nThese modes can be toggled with this `pagination_mode` parameter:\r\n- `'fe'` refers to \"front-end\" paging: passing large data up-front\r\n- `'be'` refers to \"back-end\" paging: updating the data on the fly via callbacks\r\n- `False` will disable paging, attempting to render all of the data at once\r\n- `True` is the same as `fe`\r\n\nNOTE: The `fe` and `be` names may change in the future.\r\nTune in to [https://github.com/plotly/dash-table/issues/167](https://github.com/plotly/dash-table/issues/167) for more.",
        "defaultValue": {
          "value": "'fe'",
          "computed": false
        }
      },
      "pagination_settings": {
        "type": {
          "name": "shape",
          "value": {
            "current_page": {
              "name": "number",
              "required": true
            },
            "page_size": {
              "name": "number",
              "required": true
            },
            "repositioning": {
              "name": "enum",
              "value": [
                {
                  "value": "'start'",
                  "computed": false
                },
                {
                  "value": "'end'",
                  "computed": false
                },
                {
                  "value": "undefined",
                  "computed": true
                }
              ],
              "required": false
            }
          }
        },
        "required": false,
        "description": "`pagination_settings` controls the pagination settings\r\n_and_ represents the current state of the pagination UI.\r\n- `page_size` represents the number of rows that will be\r\ndisplayed on a particular page.\r\n- `current_page` represents which page the user is on.\r\n- `repositioning` may be 'start', 'end' or undefined and it will adjust the scroll position the start or end respectively\r\nUse this property to index through data in your callbacks with\r\nbackend paging.",
        "defaultValue": {
          "value": "{\r\n    current_page: 0,\r\n    page_size: 250\r\n}",
          "computed": false
        }
      },
      "navigation": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "DEPRECATED",
        "defaultValue": {
          "value": "'page'",
          "computed": false
        }
      },
      "column_conditional_dropdowns": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "id": {
                "name": "string",
                "required": true
              },
              "dropdowns": {
                "name": "arrayOf",
                "value": {
                  "name": "shape",
                  "value": {
                    "condition": {
                      "name": "string",
                      "required": true
                    },
                    "dropdown": {
                      "name": "arrayOf",
                      "value": {
                        "name": "shape",
                        "value": {
                          "label": {
                            "name": "string",
                            "required": true
                          },
                          "value": {
                            "name": "union",
                            "value": [
                              {
                                "name": "number"
                              },
                              {
                                "name": "string"
                              }
                            ],
                            "required": true
                          }
                        }
                      },
                      "required": true
                    }
                  }
                },
                "required": true
              }
            }
          }
        },
        "required": false,
        "description": "`column_conditional_dropdowns` specifies the available options\r\nfor dropdowns in various columns and cells.\r\nThis property allows you to specify different dropdowns\r\ndepending on certain conditions. For example, you may\r\nrender different \"city\" dropdowns in a row depending on the\r\ncurrent value in the \"state\" column.\r\n\nNOTE: The naming and the behavior of this option may change\r\nin the future.\r\nTune in to [https://github.com/plotly/dash-table/issues/168](https://github.com/plotly/dash-table/issues/168)",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "column_static_dropdown": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "id": {
                "name": "string",
                "required": true
              },
              "dropdown": {
                "name": "arrayOf",
                "value": {
                  "name": "shape",
                  "value": {
                    "label": {
                      "name": "string",
                      "required": true
                    },
                    "value": {
                      "name": "union",
                      "value": [
                        {
                          "name": "number"
                        },
                        {
                          "name": "string"
                        }
                      ],
                      "required": true
                    }
                  }
                },
                "required": true
              }
            }
          }
        },
        "required": false,
        "description": "`column_static_dropdown` represents the available dropdown\r\noptions for different columns.\r\nThe `id` property refers to the column ID.\r\nThe `dropdown` property refers to the `options` of the\r\ndropdown.\r\n\nNOTE: The naming and the behavior of this option may change\r\nin the future.\r\nTune in to [https://github.com/plotly/dash-table/issues/168](https://github.com/plotly/dash-table/issues/168)",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "column_static_tooltip": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "union",
            "value": [
              {
                "name": "shape",
                "value": {
                  "delay": {
                    "name": "number",
                    "required": false
                  },
                  "duration": {
                    "name": "number",
                    "required": false
                  },
                  "type": {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'text'",
                        "computed": false
                      },
                      {
                        "value": "'markdown'",
                        "computed": false
                      }
                    ],
                    "required": false
                  },
                  "value": {
                    "name": "string",
                    "required": true
                  }
                }
              },
              {
                "name": "string"
              }
            ]
          }
        },
        "required": false,
        "description": "`column_static_tooltip` represents the tooltip shown\r\nfor different columns.\r\nThe `property` name refers to the column ID.\r\nThe `type` refers to the type of tooltip syntax used\r\nfor the tooltip generation. Can either be `markdown`\r\nor `text`. Defaults to `text`.\r\nThe `value` refers to the syntax-based content of\r\nthe tooltip. This value is required.\r\nThe `delay` represents the delay in milliseconds before\r\nthe tooltip is shown when hovering a cell. This overrides\r\nthe table's `tooltip_delay` property. If set to `null`,\r\nthe tooltip will be shown immediately.\r\nThe `duration` represents the duration in milliseconds\r\nduring which the tooltip is shown when hovering a cell.\r\nThis overrides the table's `tooltip_duration` property.\r\nIf set to `null`, the tooltip will not disappear.\r\n\nAlternatively, the value of the property can also be\r\na plain string. The `text` syntax will be used in\r\nthat case.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "column_conditional_tooltips": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "if": {
                "name": "shape",
                "value": {
                  "filter": {
                    "name": "string",
                    "required": false
                  },
                  "row_index": {
                    "name": "union",
                    "value": [
                      {
                        "name": "number"
                      },
                      {
                        "name": "enum",
                        "value": [
                          {
                            "value": "'odd'",
                            "computed": false
                          },
                          {
                            "value": "'even'",
                            "computed": false
                          }
                        ]
                      }
                    ],
                    "required": false
                  },
                  "column_id": {
                    "name": "string",
                    "required": false
                  }
                },
                "required": true
              },
              "delay": {
                "name": "number",
                "required": false
              },
              "duration": {
                "name": "number",
                "required": false
              },
              "type": {
                "name": "enum",
                "value": [
                  {
                    "value": "'text'",
                    "computed": false
                  },
                  {
                    "value": "'markdown'",
                    "computed": false
                  }
                ],
                "required": false
              },
              "value": {
                "name": "string",
                "required": true
              }
            }
          }
        },
        "required": false,
        "description": "`column_conditional_tooltips` represents the tooltip shown\r\nfor different columns and cells.\r\n\nThis property allows you to specify different tooltips for\r\ndepending on certain conditions. For example, you may have\r\ndifferent tooltips in the same column based on the value\r\nof a certain data property.\r\n\nPriority is from first to last defined conditional tooltip\r\nin the list. Higher priority (more specific) conditional\r\ntooltips should be put at the beginning of the list.\r\n\nThe `if` refers to the condition that needs to be fulfilled\r\nin order for the associated tooltip configuration to be\r\nused. If multiple conditions are defined, all conditions\r\nmust be met for the tooltip to be used by a cell.\r\n\nThe `if` nested property `column_id` refers to the column\r\nID that must be matched.\r\nThe `if` nested property `row_index` refers to the index\r\nof the row in the source `data`.\r\nThe `if` nested property `filter` refers to the query that\r\nmust evaluate to True.\r\n\nThe `type` refers to the type of tooltip syntax used\r\nfor the tooltip generation. Can either be `markdown`\r\nor `text`. Defaults to `text`.\r\nThe `value` refers to the syntax-based content of\r\nthe tooltip. This value is required.\r\nThe `delay` represents the delay in milliseconds before\r\nthe tooltip is shown when hovering a cell. This overrides\r\nthe table's `tooltip_delay` property. If set to `null`,\r\nthe tooltip will be shown immediately.\r\nThe `duration` represents the duration in milliseconds\r\nduring which the tooltip is shown when hovering a cell.\r\nThis overrides the table's `tooltip_duration` property.\r\nIf set to `null`, the tooltip will not disappear.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "tooltips": {
        "type": {
          "name": "objectOf",
          "value": {
            "name": "arrayOf",
            "value": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "shape",
                  "value": {
                    "delay": {
                      "name": "number",
                      "required": false
                    },
                    "duration": {
                      "name": "number",
                      "required": false
                    },
                    "type": {
                      "name": "enum",
                      "value": [
                        {
                          "value": "'text'",
                          "computed": false
                        },
                        {
                          "value": "'markdown'",
                          "computed": false
                        }
                      ],
                      "required": false
                    },
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  }
                }
              ]
            }
          }
        },
        "required": false,
        "description": "`tooltips` represents the tooltip shown\r\nfor different columns and cells.\r\nThe `property` name refers to the column ID. Each property\r\ncontains a list of tooltips mapped to the source `data`\r\nrow index.\r\n\nThe `type` refers to the type of tooltip syntax used\r\nfor the tooltip generation. Can either be `markdown`\r\nor `text`. Defaults to `text`.\r\nThe `value` refers to the syntax-based content of\r\nthe tooltip. This value is required.\r\nThe `delay` represents the delay in milliseconds before\r\nthe tooltip is shown when hovering a cell. This overrides\r\nthe table's `tooltip_delay` property. If set to `null`,\r\nthe tooltip will be shown immediately.\r\nThe `duration` represents the duration in milliseconds\r\nduring which the tooltip is shown when hovering a cell.\r\nThis overrides the table's `tooltip_duration` property.\r\nIf set to `null`, the tooltip will not disappear.\r\n\nAlternatively, the value of the property can also be\r\na plain string. The `text` syntax will be used in\r\nthat case."
      },
      "tooltip_delay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "`tooltip_delay` represents the table-wide delay in milliseconds before\r\nthe tooltip is shown when hovering a cell. If set to `null`, the tooltip\r\nwill be shown immediately.\r\n\nDefaults to 350.",
        "defaultValue": {
          "value": "350",
          "computed": false
        }
      },
      "tooltip_duration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "`tooltip_duration` represents the table-wide duration in milliseconds\r\nduring which the tooltip will be displayed when hovering a cell. If\r\nset to `null`, the tooltip will not disappear.\r\n\nDefaults to 2000.",
        "defaultValue": {
          "value": "2000",
          "computed": false
        }
      },
      "filtering": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'fe'",
              "computed": false
            },
            {
              "value": "'be'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The `filtering` property controls the behavior of the `filtering` UI.\r\nIf `False`, then the filtering UI is not displayed\r\nIf `fe` or True, then the filtering UI is displayed and the filtering\r\nhappens in the \"front-end\". That is, it is performed on the data\r\nthat exists in the `data` property.\r\nIf `be`, then the filtering UI is displayed but it is the\r\nresponsibility of the developer to program the filtering\r\nthrough a callback (where `filtering_settings` would be the input\r\nand `data` would be the output).\r\n\nNOTE - Several aspects of filtering may change in the future,\r\nincluding the naming of this property.\r\nTune in to [https://github.com/plotly/dash-table/issues/167](https://github.com/plotly/dash-table/issues/167)",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "filtering_settings": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "If `filtering` is enabled, then the current filtering\r\nstring is represented in this `filtering_settings`\r\nproperty.\r\nNOTE: The shape and structure of this property will\r\nlikely change in the future.\r\nStay tuned in [https://github.com/plotly/dash-table/issues/169](https://github.com/plotly/dash-table/issues/169)",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "filtering_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'basic'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "UNSTABLE\r\nIn the future, there may be several modes of the\r\nfiltering UI like `basic`, `advanced`, etc.\r\nCurrently, we only `basic`.\r\nNOTE - This will likely change in the future,\r\nsubscribe to changes here:\r\n[https://github.com/plotly/dash-table/issues/169](https://github.com/plotly/dash-table/issues/169)",
        "defaultValue": {
          "value": "'basic'",
          "computed": false
        }
      },
      "filtering_types": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "enum",
            "value": [
              {
                "value": "'basic'",
                "computed": false
              }
            ]
          }
        },
        "required": false,
        "description": "UNSTABLE\r\nIn the future, there may be several modes of the\r\nfiltering UI like `basic`, `advanced`, etc\r\nNOTE - This will likely change in the future,\r\nsubscribe to changes here:\r\n[https://github.com/plotly/dash-table/issues/169](https://github.com/plotly/dash-table/issues/169)",
        "defaultValue": {
          "value": "['basic']",
          "computed": false
        }
      },
      "sorting": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'fe'",
              "computed": false
            },
            {
              "value": "'be'",
              "computed": false
            },
            {
              "value": "true",
              "computed": false
            },
            {
              "value": "false",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The `sorting` property enables data to be\r\nsorted on a per-column basis.\r\nEnabling `sorting` will display a UI element\r\non each of the columns (up and down arrows).\r\n\nSorting can be performed in the \"front-end\"\r\nwith the `fe` (or True) setting or via a callback in your\r\npython \"back-end\" with the `be` setting.\r\nClicking on the sort arrows will update the\r\n`sorting_settings` property.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "sorting_type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'single'",
              "computed": false
            },
            {
              "value": "'multi'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Sorting can be performed across multiple columns\r\n(e.g. sort by country, sort within each country,\r\n sort by year) or by a single column.\r\n\nNOTE - With multi-column sort, it's currently\r\nnot possible to determine the order in which\r\nthe columns were sorted through the UI.\r\nSee [https://github.com/plotly/dash-table/issues/170](https://github.com/plotly/dash-table/issues/170)",
        "defaultValue": {
          "value": "'single'",
          "computed": false
        }
      },
      "sorting_settings": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "column_id": {
                "name": "union",
                "value": [
                  {
                    "name": "string"
                  },
                  {
                    "name": "number"
                  }
                ],
                "required": true
              },
              "direction": {
                "name": "enum",
                "value": [
                  {
                    "value": "'asc'",
                    "computed": false
                  },
                  {
                    "value": "'desc'",
                    "computed": false
                  }
                ],
                "required": true
              }
            }
          }
        },
        "required": false,
        "description": "`sorting_settings` describes the current state\r\nof the sorting UI.\r\nThat is, if the user clicked on the sort arrow\r\nof a column, then this property will be updated\r\nwith the column ID and the direction\r\n(`asc` or `desc`) of the sort.\r\nFor multi-column sorting, this will be a list of\r\nsorting parameters, in the order in which they were\r\nclicked.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "sorting_treat_empty_string_as_none": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If False, then empty strings (`''`) are considered\r\nvalid values (they will appear first when sorting ascending).\r\nIf True, empty strings will be ignored, causing these cells to always\r\nappear last."
      },
      "style_table": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS styles to be applied to the outer `table` container.\r\n\nThis is commonly used for setting properties like the\r\nwidth or the height of the table.",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "style_cell": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS styles to be applied to each individual cell of the table.\r\n\nThis includes the header cells, the `data` cells, and the filter\r\ncells."
      },
      "style_data": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS styles to be applied to each individual data cell.\r\n\nThat is, unlike `style_cell`, it excludes the header and filter cells."
      },
      "style_filter": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS styles to be applied to the filter cells.\r\n\nNote that this may change in the future as we build out a\r\nmore complex filtering UI."
      },
      "style_header": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS styles to be applied to each individual header cell.\r\n\nThat is, unlike `style_cell`, it excludes the `data` and filter cells."
      },
      "style_cell_conditional": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "if": {
                "name": "shape",
                "value": {
                  "column_id": {
                    "name": "union",
                    "value": [
                      {
                        "name": "string"
                      },
                      {
                        "name": "number"
                      }
                    ],
                    "required": false
                  },
                  "column_type": {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'any'",
                        "computed": false
                      },
                      {
                        "value": "'numeric'",
                        "computed": false
                      },
                      {
                        "value": "'text'",
                        "computed": false
                      }
                    ],
                    "required": false
                  }
                },
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "Conditional CSS styles for the cells.\r\n\nThis can be used to apply styles to cells on a per-column basis.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "style_data_conditional": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "if": {
                "name": "shape",
                "value": {
                  "column_id": {
                    "name": "union",
                    "value": [
                      {
                        "name": "string"
                      },
                      {
                        "name": "number"
                      }
                    ],
                    "required": false
                  },
                  "column_type": {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'any'",
                        "computed": false
                      },
                      {
                        "value": "'numeric'",
                        "computed": false
                      },
                      {
                        "value": "'text'",
                        "computed": false
                      }
                    ],
                    "required": false
                  },
                  "filter": {
                    "name": "string",
                    "required": false
                  },
                  "row_index": {
                    "name": "union",
                    "value": [
                      {
                        "name": "number"
                      },
                      {
                        "name": "enum",
                        "value": [
                          {
                            "value": "'odd'",
                            "computed": false
                          },
                          {
                            "value": "'even'",
                            "computed": false
                          }
                        ]
                      }
                    ],
                    "required": false
                  }
                },
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "Conditional CSS styles for the data cells.\r\n\nThis can be used to apply styles to data cells on a per-column basis.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "style_filter_conditional": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "if": {
                "name": "shape",
                "value": {
                  "column_id": {
                    "name": "union",
                    "value": [
                      {
                        "name": "string"
                      },
                      {
                        "name": "number"
                      }
                    ],
                    "required": false
                  },
                  "column_type": {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'any'",
                        "computed": false
                      },
                      {
                        "value": "'numeric'",
                        "computed": false
                      },
                      {
                        "value": "'text'",
                        "computed": false
                      }
                    ],
                    "required": false
                  }
                },
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "Conditional CSS styles for the filter cells.\r\n\nThis can be used to apply styles to filter cells on a per-column basis."
      },
      "style_header_conditional": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "shape",
            "value": {
              "if": {
                "name": "shape",
                "value": {
                  "column_id": {
                    "name": "union",
                    "value": [
                      {
                        "name": "string"
                      },
                      {
                        "name": "number"
                      }
                    ],
                    "required": false
                  },
                  "column_type": {
                    "name": "enum",
                    "value": [
                      {
                        "value": "'any'",
                        "computed": false
                      },
                      {
                        "value": "'numeric'",
                        "computed": false
                      },
                      {
                        "value": "'text'",
                        "computed": false
                      }
                    ],
                    "required": false
                  },
                  "header_index": {
                    "name": "union",
                    "value": [
                      {
                        "name": "number"
                      },
                      {
                        "name": "enum",
                        "value": [
                          {
                            "value": "'odd'",
                            "computed": false
                          },
                          {
                            "value": "'even'",
                            "computed": false
                          }
                        ]
                      }
                    ],
                    "required": false
                  }
                },
                "required": false
              }
            }
          }
        },
        "required": false,
        "description": "Conditional CSS styles for the header cells.\r\n\nThis can be used to apply styles to header cells on a per-column basis.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "virtualization": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "This property tells the table to use virtualization when rendering.\r\n\nAssumptions are that:\r\n- the width of the columns is fixed\r\n- the height of the rows is always the same\r\n- runtime styling changes will not affect width and height vs. first rendering",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "derived_viewport_data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "This property represents the current state of `data`\r\non the current page. This property will be updated\r\non paging, sorting, and filtering.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_viewport_indices": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "`derived_viewport_indices` indicates the order in which the original\r\nrows appear after being filtered, sorted, and/or paged.\r\n`derived_viewport_indices` contains indices for the current page,\r\nwhile `derived_virtual_indices` contains indices for across all pages.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_viewport_selected_rows": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "`derived_viewport_selected_rows` represents the indices of the\r\n `selected_rows` from the perspective of the `derived_viewport_indices`.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_virtual_data": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "object"
          }
        },
        "required": false,
        "description": "This property represents the visible state of `data`\r\nacross all pages after the front-end sorting and filtering\r\nas been applied.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_virtual_indices": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "`derived_viewport_indices` indicates the order in which the original\r\nrows appear after being filtered, sorted, and/or paged.\r\n`derived_viewport_indices` contains indices for the current page,\r\nwhile `derived_virtual_indices` contains indices for across all pages.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "derived_virtual_selected_rows": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "number"
          }
        },
        "required": false,
        "description": "`derived_virtual_selected_rows` represents the indices of the\r\n `selected_rows` from the perspective of the `derived_virtual_indices`.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "dropdown_properties": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "DEPRECATED\r\nSubscribe to [https://github.com/plotly/dash-table/issues/168](https://github.com/plotly/dash-table/issues/168)\r\nfor updates on the dropdown API."
      }
    }
  }
}
